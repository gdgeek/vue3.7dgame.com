{
    "sourceFile": "src/components/Coding.vue",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 9,
            "patches": [
                {
                    "date": 1723566351417,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1723566375397,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -199,8 +199,9 @@\n const load = (data: any) => {\n   if (workspace.value) {\n     try {\n       const parsedData = JSON.parse(data);\n+      alert(data);\n       const blocks = parsedData.blocks || [];\n       console.log(\"blocks\", workspace.value, blocks);\n       // 保存当前工作区状态\n       const state = Blockly.serialization.workspaces.save(workspace.value);\n"
                },
                {
                    "date": 1723566402289,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -196,12 +196,13 @@\n     : undefined;\n };\n \n const load = (data: any) => {\n+  alert(data);\n   if (workspace.value) {\n     try {\n       const parsedData = JSON.parse(data);\n-      alert(data);\n+\n       const blocks = parsedData.blocks || [];\n       console.log(\"blocks\", workspace.value, blocks);\n       // 保存当前工作区状态\n       const state = Blockly.serialization.workspaces.save(workspace.value);\n"
                },
                {
                    "date": 1723566434586,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,8 +76,9 @@\n       },\n     });\n \n     if (props.cyber && props.cyber.data) {\n+      alert(props.cyber.data);\n       const res = load(props.cyber.data);\n       console.log(\"Load result:\", res);\n     }\n     console.log(\"Initialized workspace:\", workspace.value);\n"
                },
                {
                    "date": 1723566453145,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,8 +45,9 @@\n const workspace = ref<WorkspaceSvg>();\n \n onMounted(() => {\n   try {\n+    alert(props.cyber.data);\n     if (props.meta.data) {\n       console.log(\"index\", props.index);\n       console.log(\"resource\", getResource(props.meta));\n       const res = AddBlocks({\n@@ -76,9 +77,8 @@\n       },\n     });\n \n     if (props.cyber && props.cyber.data) {\n-      alert(props.cyber.data);\n       const res = load(props.cyber.data);\n       console.log(\"Load result:\", res);\n     }\n     console.log(\"Initialized workspace:\", workspace.value);\n"
                },
                {
                    "date": 1723567223525,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,8 @@\n const workspace = ref<WorkspaceSvg>();\n \n onMounted(() => {\n   try {\n-    alert(props.cyber.data);\n     if (props.meta.data) {\n       console.log(\"index\", props.index);\n       console.log(\"resource\", getResource(props.meta));\n       const res = AddBlocks({\n"
                },
                {
                    "date": 1723609459352,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,256 @@\n+<template>\n+  <div>\n+    <el-tabs v-model=\"activeName\" type=\"card\" @tab-click=\"handleClick\">\n+      <el-tab-pane label=\"逻辑编辑\" name=\"blockly\"></el-tab-pane>\n+      <el-tab-pane label=\"代码查看\" name=\"script\"></el-tab-pane>\n+    </el-tabs>\n+    <div\n+      v-show=\"activeName === 'blockly'\"\n+      id=\"blocklyDiv\"\n+      style=\"height: 600px; width: 100%\"\n+    ></div>\n+    <el-card v-if=\"activeName === 'script'\" class=\"box-card\">\n+      <div v-highlight>\n+        <pre>\n+          <code class=\"lua\">{{ script }}</code>\n+        </pre>\n+      </div>\n+    </el-card>\n+  </div>\n+</template>\n+\n+<script setup lang=\"ts\">\n+import * as Blockly from \"blockly\";\n+import toolbox from \"@/assets/js/blockly/toolbox\";\n+import { AddBlocks } from \"@/assets/js/blockly/blocks\";\n+import { cybersType, putCyber } from \"@/api/v1/cyber\";\n+import { metaInfo } from \"@/api/v1/meta\";\n+import type { TabsPaneContext } from \"element-plus\";\n+import { LuaGenerator } from \"blockly/lua\";\n+import type { Workspace, WorkspaceSvg } from \"blockly\";\n+\n+const luaGeneratorInstance = new LuaGenerator();\n+\n+const props = defineProps<{\n+  cyber: cybersType;\n+  meta: metaInfo;\n+  id: number;\n+  index: string;\n+}>();\n+\n+console.log(\"props\", props);\n+\n+const activeName = ref(\"blockly\");\n+const script = ref(\"\");\n+const workspace = ref<WorkspaceSvg>();\n+\n+onMounted(() => {\n+  try {\n+    if (props.meta.data) {\n+      console.log(\"index\", props.index);\n+      console.log(\"resource\", getResource(props.meta));\n+      const res = AddBlocks({\n+        index: props.index,\n+        resource: getResource(props.meta),\n+      });\n+      console.log(\"AddBlocks\", res); // undefined\n+    }\n+\n+    // 初始化 Blockly 工作区\n+    workspace.value = Blockly.inject(\"blocklyDiv\", {\n+      media: \"/src/assets/blockly/media/\",\n+      toolbox,\n+      grid: { spacing: 20, length: 3, colour: \"#ccc\", snap: true },\n+      move: {\n+        scrollbars: { horizontal: false, vertical: true },\n+        drag: true,\n+        wheel: false,\n+      },\n+      zoom: {\n+        startScale: 1.0,\n+        maxScale: 3,\n+        minScale: 0.3,\n+        controls: true,\n+        wheel: true,\n+        pinch: true,\n+      },\n+    });\n+\n+    if (props.cyber && props.cyber.data) {\n+      const res = load(props.cyber.data);\n+      console.log(\"Load result:\", res);\n+    }\n+    console.log(\"Initialized workspace:\", workspace.value);\n+\n+    const luaCode = luaGeneratorInstance.workspaceToCode(workspace.value);\n+    console.log(\"luaCode\", luaCode);\n+\n+    script.value = \"local meta = {}\\nindex = ''\\n\" + luaCode;\n+  } catch (error) {\n+    console.error(\"Error in onMounted:\", error);\n+  }\n+});\n+\n+const getResource = (meta: metaInfo) => {\n+  const data = JSON.parse(meta.data!);\n+  console.log(\"data\", data);\n+  const ret = {\n+    action: [],\n+    trigger: [],\n+    polygen: [],\n+    picture: [],\n+    video: [],\n+    voxel: [],\n+    text: [],\n+    sound: [],\n+    entity: [],\n+    events: {\n+      inputs: [],\n+      outputs: [],\n+    },\n+  };\n+  ret.events = JSON.parse(meta.events!) || { inputs: [], outputs: [] };\n+  console.log(\"events\", ret.events);\n+  addMetaData(data, ret);\n+  return ret;\n+};\n+\n+const addMetaData = (data: any, ret: any) => {\n+  const action = testAction(data);\n+  console.log(\"action\", action);\n+  if (action) {\n+    ret.action.push(action);\n+  }\n+\n+  const entity = testPoint(data, [\n+    \"polygen\",\n+    \"entity\",\n+    \"voxel\",\n+    \"video\",\n+    \"picture\",\n+    \"text\",\n+    \"voxel\",\n+  ]);\n+\n+  console.log(\"entity\", entity);\n+\n+  if (entity) {\n+    ret.entity.push(entity);\n+  }\n+\n+  const polygen = testPoint(data, [\"polygen\"]);\n+  if (polygen) {\n+    ret.polygen.push(polygen);\n+  }\n+\n+  const video = testPoint(data, [\"video\"]);\n+  if (video) {\n+    ret.video.push(video);\n+  }\n+\n+  const picture = testPoint(data, [\"picture\"]);\n+  if (picture) {\n+    ret.picture.push(picture);\n+  }\n+\n+  const sound = testPoint(data, [\"sound\"]);\n+  if (sound) {\n+    ret.sound.push(sound);\n+  }\n+\n+  const text = testPoint(data, [\"text\"]);\n+  if (text) {\n+    ret.text.push(text);\n+  }\n+\n+  const voxel = testPoint(data, [\"voxel\"]);\n+  if (voxel) {\n+    ret.voxel.push(voxel);\n+  }\n+\n+  if (data.children) {\n+    Object.keys(data.children).forEach((key) => {\n+      data.children[key].forEach((item: any) => {\n+        addMetaData(item, ret);\n+      });\n+    });\n+  }\n+};\n+\n+const testAction = (data: any) => {\n+  if (data && data.parameters && typeof data.parameters !== \"undefined\") {\n+    return {\n+      uuid: data.parameters.uuid,\n+      name: data.parameters.action ?? null,\n+      parameter: data.parameters.parameter ?? null,\n+    };\n+  }\n+};\n+\n+const testPoint = (data: any, typeList: string[]) => {\n+  return typeList.find((type) => data.type.toLowerCase() === type.toLowerCase())\n+    ? {\n+        uuid: data.parameters.uuid,\n+        name: data.parameters.name ?? null,\n+      }\n+    : undefined;\n+};\n+\n+const load = (data: any) => {\n+  alert(data);\n+  if (workspace.value) {\n+    try {\n+      const parsedData = JSON.parse(data);\n+\n+      const blocks = parsedData.blocks || [];\n+      console.log(\"blocks\", workspace.value, blocks);\n+      // 保存当前工作区状态\n+      const state = Blockly.serialization.workspaces.save(workspace.value);\n+      // const res = Blockly.serialization.workspaces.load(state, workspace.value);\n+      const res = Blockly.serialization.workspaces.load(\n+        { blocks: blocks },\n+        workspace.value,\n+        { recordUndo: true } // 可选，记录撤销操作\n+      );\n+      console.log(\"blocklyload\", res);\n+    } catch (error) {\n+      alert(error);\n+      console.error(\"Error loading workspace:\", error);\n+    }\n+  }\n+};\n+\n+const handleClick = (tab: TabsPaneContext, event: Event) => {};\n+\n+const save = async () => {\n+  if (!workspace.value) return;\n+\n+  const data = Blockly.serialization.workspaces.save(workspace.value);\n+  if (props.cyber.data === JSON.stringify(data)) return;\n+\n+  try {\n+    const scriptValue =\n+      \"local meta = {}\\nindex = ''\\n\" +\n+      luaGeneratorInstance.workspaceToCode(workspace.value);\n+\n+    await putCyber(props.cyber.id, {\n+      data: JSON.stringify(data),\n+      script: scriptValue,\n+    });\n+\n+    ElMessage({\n+      message: \"代码保存成功\",\n+      type: \"success\",\n+    });\n+  } catch (e: any) {\n+    ElMessage({\n+      message: e.message,\n+      type: \"error\",\n+    });\n+  }\n+};\n+\n+defineExpose({\n+  save,\n+});\n+</script>\n"
                },
                {
                    "date": 1723609467408,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -212,265 +212,9 @@\n         workspace.value,\n         { recordUndo: true } // 可选，记录撤销操作\n       );\n       console.log(\"blocklyload\", res);\n-    } catch (error) {\n-      alert(error);\n-      console.error(\"Error loading workspace:\", error);\n     }\n-  }\n-};\n-\n-const handleClick = (tab: TabsPaneContext, event: Event) => {};\n-\n-const save = async () => {\n-  if (!workspace.value) return;\n-\n-  const data = Blockly.serialization.workspaces.save(workspace.value);\n-  if (props.cyber.data === JSON.stringify(data)) return;\n-\n-  try {\n-    const scriptValue =\n-      \"local meta = {}\\nindex = ''\\n\" +\n-      luaGeneratorInstance.workspaceToCode(workspace.value);\n-\n-    await putCyber(props.cyber.id, {\n-      data: JSON.stringify(data),\n-      script: scriptValue,\n-    });\n-\n-    ElMessage({\n-      message: \"代码保存成功\",\n-      type: \"success\",\n-    });\n-  } catch (e: any) {\n-    ElMessage({\n-      message: e.message,\n-      type: \"error\",\n-    });\n-  }\n-};\n-\n-defineExpose({\n-  save,\n-});\n-</script>\n-<template>\n-  <div>\n-    <el-tabs v-model=\"activeName\" type=\"card\" @tab-click=\"handleClick\">\n-      <el-tab-pane label=\"逻辑编辑\" name=\"blockly\"></el-tab-pane>\n-      <el-tab-pane label=\"代码查看\" name=\"script\"></el-tab-pane>\n-    </el-tabs>\n-    <div\n-      v-show=\"activeName === 'blockly'\"\n-      id=\"blocklyDiv\"\n-      style=\"height: 600px; width: 100%\"\n-    ></div>\n-    <el-card v-if=\"activeName === 'script'\" class=\"box-card\">\n-      <div v-highlight>\n-        <pre>\n-          <code class=\"lua\">{{ script }}</code>\n-        </pre>\n-      </div>\n-    </el-card>\n-  </div>\n-</template>\n-\n-<script setup lang=\"ts\">\n-import * as Blockly from \"blockly\";\n-import toolbox from \"@/assets/js/blockly/toolbox\";\n-import { AddBlocks } from \"@/assets/js/blockly/blocks\";\n-import { cybersType, putCyber } from \"@/api/v1/cyber\";\n-import { metaInfo } from \"@/api/v1/meta\";\n-import type { TabsPaneContext } from \"element-plus\";\n-import { LuaGenerator } from \"blockly/lua\";\n-import type { Workspace, WorkspaceSvg } from \"blockly\";\n-\n-const luaGeneratorInstance = new LuaGenerator();\n-\n-const props = defineProps<{\n-  cyber: cybersType;\n-  meta: metaInfo;\n-  id: number;\n-  index: string;\n-}>();\n-\n-console.log(\"props\", props);\n-\n-const activeName = ref(\"blockly\");\n-const script = ref(\"\");\n-const workspace = ref<WorkspaceSvg>();\n-\n-onMounted(() => {\n-  try {\n-    if (props.meta.data) {\n-      console.log(\"index\", props.index);\n-      console.log(\"resource\", getResource(props.meta));\n-      const res = AddBlocks({\n-        index: props.index,\n-        resource: getResource(props.meta),\n-      });\n-      console.log(\"AddBlocks\", res); // undefined\n-    }\n-\n-    // 初始化 Blockly 工作区\n-    workspace.value = Blockly.inject(\"blocklyDiv\", {\n-      media: \"/src/assets/blockly/media/\",\n-      toolbox,\n-      grid: { spacing: 20, length: 3, colour: \"#ccc\", snap: true },\n-      move: {\n-        scrollbars: { horizontal: false, vertical: true },\n-        drag: true,\n-        wheel: false,\n-      },\n-      zoom: {\n-        startScale: 1.0,\n-        maxScale: 3,\n-        minScale: 0.3,\n-        controls: true,\n-        wheel: true,\n-        pinch: true,\n-      },\n-    });\n-\n-    if (props.cyber && props.cyber.data) {\n-      const res = load(props.cyber.data);\n-      console.log(\"Load result:\", res);\n-    }\n-    console.log(\"Initialized workspace:\", workspace.value);\n-\n-    const luaCode = luaGeneratorInstance.workspaceToCode(workspace.value);\n-    console.log(\"luaCode\", luaCode);\n-\n-    script.value = \"local meta = {}\\nindex = ''\\n\" + luaCode;\n-  } catch (error) {\n-    console.error(\"Error in onMounted:\", error);\n-  }\n-});\n-\n-const getResource = (meta: metaInfo) => {\n-  const data = JSON.parse(meta.data!);\n-  console.log(\"data\", data);\n-  const ret = {\n-    action: [],\n-    trigger: [],\n-    polygen: [],\n-    picture: [],\n-    video: [],\n-    voxel: [],\n-    text: [],\n-    sound: [],\n-    entity: [],\n-    events: {\n-      inputs: [],\n-      outputs: [],\n-    },\n-  };\n-  ret.events = JSON.parse(meta.events!) || { inputs: [], outputs: [] };\n-  console.log(\"events\", ret.events);\n-  addMetaData(data, ret);\n-  return ret;\n-};\n-\n-const addMetaData = (data: any, ret: any) => {\n-  const action = testAction(data);\n-  console.log(\"action\", action);\n-  if (action) {\n-    ret.action.push(action);\n-  }\n-\n-  const entity = testPoint(data, [\n-    \"polygen\",\n-    \"entity\",\n-    \"voxel\",\n-    \"video\",\n-    \"picture\",\n-    \"text\",\n-    \"voxel\",\n-  ]);\n-\n-  console.log(\"entity\", entity);\n-\n-  if (entity) {\n-    ret.entity.push(entity);\n-  }\n-\n-  const polygen = testPoint(data, [\"polygen\"]);\n-  if (polygen) {\n-    ret.polygen.push(polygen);\n-  }\n-\n-  const video = testPoint(data, [\"video\"]);\n-  if (video) {\n-    ret.video.push(video);\n-  }\n-\n-  const picture = testPoint(data, [\"picture\"]);\n-  if (picture) {\n-    ret.picture.push(picture);\n-  }\n-\n-  const sound = testPoint(data, [\"sound\"]);\n-  if (sound) {\n-    ret.sound.push(sound);\n-  }\n-\n-  const text = testPoint(data, [\"text\"]);\n-  if (text) {\n-    ret.text.push(text);\n-  }\n-\n-  const voxel = testPoint(data, [\"voxel\"]);\n-  if (voxel) {\n-    ret.voxel.push(voxel);\n-  }\n-\n-  if (data.children) {\n-    Object.keys(data.children).forEach((key) => {\n-      data.children[key].forEach((item: any) => {\n-        addMetaData(item, ret);\n-      });\n-    });\n-  }\n-};\n-\n-const testAction = (data: any) => {\n-  if (data && data.parameters && typeof data.parameters !== \"undefined\") {\n-    return {\n-      uuid: data.parameters.uuid,\n-      name: data.parameters.action ?? null,\n-      parameter: data.parameters.parameter ?? null,\n-    };\n-  }\n-};\n-\n-const testPoint = (data: any, typeList: string[]) => {\n-  return typeList.find((type) => data.type.toLowerCase() === type.toLowerCase())\n-    ? {\n-        uuid: data.parameters.uuid,\n-        name: data.parameters.name ?? null,\n-      }\n-    : undefined;\n-};\n-\n-const load = (data: any) => {\n-  alert(data);\n-  if (workspace.value) {\n-    try {\n-      const parsedData = JSON.parse(data);\n-\n-      const blocks = parsedData.blocks || [];\n-      console.log(\"blocks\", workspace.value, blocks);\n-      // 保存当前工作区状态\n-      const state = Blockly.serialization.workspaces.save(workspace.value);\n-      // const res = Blockly.serialization.workspaces.load(state, workspace.value);\n-      const res = Blockly.serialization.workspaces.load(\n-        { blocks: blocks },\n-        workspace.value,\n-        { recordUndo: true } // 可选，记录撤销操作\n-      );\n-      console.log(\"blocklyload\", res);\n-    } catch (error) {\n       console.error(\"Error loading workspace:\", error);\n     }\n   }\n };\n"
                },
                {
                    "date": 1723609475615,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -206,9 +206,13 @@\n       console.log(\"blocks\", workspace.value, blocks);\n       // 保存当前工作区状态\n       const state = Blockly.serialization.workspaces.save(workspace.value);\n       // const res = Blockly.serialization.workspaces.load(state, workspace.value);\n-\n+      const res = Blockly.serialization.workspaces.load(\n+        { blocks: blocks },\n+        workspace.value,\n+        { recordUndo: true } // 可选，记录撤销操作\n+      );\n       console.log(\"blocklyload\", res);\n     }\n       console.error(\"Error loading workspace:\", error);\n     }\n"
                },
                {
                    "date": 1723609524099,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -206,14 +206,14 @@\n       console.log(\"blocks\", workspace.value, blocks);\n       // 保存当前工作区状态\n       const state = Blockly.serialization.workspaces.save(workspace.value);\n       // const res = Blockly.serialization.workspaces.load(state, workspace.value);\n-      const res = Blockly.serialization.workspaces.load(\n+      const result = Blockly.serialization.workspaces.load(\n         { blocks: blocks },\n         workspace.value,\n         { recordUndo: true } // 可选，记录撤销操作\n       );\n-      console.log(\"blocklyload\", res);\n+      console.log(\"blocklyload\", result);\n     } catch (error) {\n       alert(error);\n       console.error(\"Error loading workspace:\", error);\n     }\n"
                }
            ],
            "date": 1723566351417,
            "name": "Commit-0",
            "content": "<template>\n  <div>\n    <el-tabs v-model=\"activeName\" type=\"card\" @tab-click=\"handleClick\">\n      <el-tab-pane label=\"逻辑编辑\" name=\"blockly\"></el-tab-pane>\n      <el-tab-pane label=\"代码查看\" name=\"script\"></el-tab-pane>\n    </el-tabs>\n    <div\n      v-show=\"activeName === 'blockly'\"\n      id=\"blocklyDiv\"\n      style=\"height: 600px; width: 100%\"\n    ></div>\n    <el-card v-if=\"activeName === 'script'\" class=\"box-card\">\n      <div v-highlight>\n        <pre>\n          <code class=\"lua\">{{ script }}</code>\n        </pre>\n      </div>\n    </el-card>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport * as Blockly from \"blockly\";\nimport toolbox from \"@/assets/js/blockly/toolbox\";\nimport { AddBlocks } from \"@/assets/js/blockly/blocks\";\nimport { cybersType, putCyber } from \"@/api/v1/cyber\";\nimport { metaInfo } from \"@/api/v1/meta\";\nimport type { TabsPaneContext } from \"element-plus\";\nimport { LuaGenerator } from \"blockly/lua\";\nimport type { Workspace, WorkspaceSvg } from \"blockly\";\n\nconst luaGeneratorInstance = new LuaGenerator();\n\nconst props = defineProps<{\n  cyber: cybersType;\n  meta: metaInfo;\n  id: number;\n  index: string;\n}>();\n\nconsole.log(\"props\", props);\n\nconst activeName = ref(\"blockly\");\nconst script = ref(\"\");\nconst workspace = ref<WorkspaceSvg>();\n\nonMounted(() => {\n  try {\n    if (props.meta.data) {\n      console.log(\"index\", props.index);\n      console.log(\"resource\", getResource(props.meta));\n      const res = AddBlocks({\n        index: props.index,\n        resource: getResource(props.meta),\n      });\n      console.log(\"AddBlocks\", res); // undefined\n    }\n\n    // 初始化 Blockly 工作区\n    workspace.value = Blockly.inject(\"blocklyDiv\", {\n      media: \"/src/assets/blockly/media/\",\n      toolbox,\n      grid: { spacing: 20, length: 3, colour: \"#ccc\", snap: true },\n      move: {\n        scrollbars: { horizontal: false, vertical: true },\n        drag: true,\n        wheel: false,\n      },\n      zoom: {\n        startScale: 1.0,\n        maxScale: 3,\n        minScale: 0.3,\n        controls: true,\n        wheel: true,\n        pinch: true,\n      },\n    });\n\n    if (props.cyber && props.cyber.data) {\n      const res = load(props.cyber.data);\n      console.log(\"Load result:\", res);\n    }\n    console.log(\"Initialized workspace:\", workspace.value);\n\n    const luaCode = luaGeneratorInstance.workspaceToCode(workspace.value);\n    console.log(\"luaCode\", luaCode);\n\n    script.value = \"local meta = {}\\nindex = ''\\n\" + luaCode;\n  } catch (error) {\n    console.error(\"Error in onMounted:\", error);\n  }\n});\n\nconst getResource = (meta: metaInfo) => {\n  const data = JSON.parse(meta.data!);\n  console.log(\"data\", data);\n  const ret = {\n    action: [],\n    trigger: [],\n    polygen: [],\n    picture: [],\n    video: [],\n    voxel: [],\n    text: [],\n    sound: [],\n    entity: [],\n    events: {\n      inputs: [],\n      outputs: [],\n    },\n  };\n  ret.events = JSON.parse(meta.events!) || { inputs: [], outputs: [] };\n  console.log(\"events\", ret.events);\n  addMetaData(data, ret);\n  return ret;\n};\n\nconst addMetaData = (data: any, ret: any) => {\n  const action = testAction(data);\n  console.log(\"action\", action);\n  if (action) {\n    ret.action.push(action);\n  }\n\n  const entity = testPoint(data, [\n    \"polygen\",\n    \"entity\",\n    \"voxel\",\n    \"video\",\n    \"picture\",\n    \"text\",\n    \"voxel\",\n  ]);\n\n  console.log(\"entity\", entity);\n\n  if (entity) {\n    ret.entity.push(entity);\n  }\n\n  const polygen = testPoint(data, [\"polygen\"]);\n  if (polygen) {\n    ret.polygen.push(polygen);\n  }\n\n  const video = testPoint(data, [\"video\"]);\n  if (video) {\n    ret.video.push(video);\n  }\n\n  const picture = testPoint(data, [\"picture\"]);\n  if (picture) {\n    ret.picture.push(picture);\n  }\n\n  const sound = testPoint(data, [\"sound\"]);\n  if (sound) {\n    ret.sound.push(sound);\n  }\n\n  const text = testPoint(data, [\"text\"]);\n  if (text) {\n    ret.text.push(text);\n  }\n\n  const voxel = testPoint(data, [\"voxel\"]);\n  if (voxel) {\n    ret.voxel.push(voxel);\n  }\n\n  if (data.children) {\n    Object.keys(data.children).forEach((key) => {\n      data.children[key].forEach((item: any) => {\n        addMetaData(item, ret);\n      });\n    });\n  }\n};\n\nconst testAction = (data: any) => {\n  if (data && data.parameters && typeof data.parameters !== \"undefined\") {\n    return {\n      uuid: data.parameters.uuid,\n      name: data.parameters.action ?? null,\n      parameter: data.parameters.parameter ?? null,\n    };\n  }\n};\n\nconst testPoint = (data: any, typeList: string[]) => {\n  return typeList.find((type) => data.type.toLowerCase() === type.toLowerCase())\n    ? {\n        uuid: data.parameters.uuid,\n        name: data.parameters.name ?? null,\n      }\n    : undefined;\n};\n\nconst load = (data: any) => {\n  if (workspace.value) {\n    try {\n      const parsedData = JSON.parse(data);\n      const blocks = parsedData.blocks || [];\n      console.log(\"blocks\", workspace.value, blocks);\n      // 保存当前工作区状态\n      const state = Blockly.serialization.workspaces.save(workspace.value);\n      // const res = Blockly.serialization.workspaces.load(state, workspace.value);\n      const res = Blockly.serialization.workspaces.load(\n        { blocks: blocks },\n        workspace.value,\n        { recordUndo: true } // 可选，记录撤销操作\n      );\n      console.log(\"blocklyload\", res);\n    } catch (error) {\n      console.error(\"Error loading workspace:\", error);\n    }\n  }\n};\n\nconst handleClick = (tab: TabsPaneContext, event: Event) => {};\n\nconst save = async () => {\n  if (!workspace.value) return;\n\n  const data = Blockly.serialization.workspaces.save(workspace.value);\n  if (props.cyber.data === JSON.stringify(data)) return;\n\n  try {\n    const scriptValue =\n      \"local meta = {}\\nindex = ''\\n\" +\n      luaGeneratorInstance.workspaceToCode(workspace.value);\n\n    await putCyber(props.cyber.id, {\n      data: JSON.stringify(data),\n      script: scriptValue,\n    });\n\n    ElMessage({\n      message: \"代码保存成功\",\n      type: \"success\",\n    });\n  } catch (e: any) {\n    ElMessage({\n      message: e.message,\n      type: \"error\",\n    });\n  }\n};\n\ndefineExpose({\n  save,\n});\n</script>\n"
        }
    ]
}